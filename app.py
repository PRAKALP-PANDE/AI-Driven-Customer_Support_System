import streamlit as st
from langchain.prompts import PromptTemplate
from langchain.llms import CTransformers
from pymongo import MongoClient
import hashlib
import speech_recognition as sr
import tempfile
import os

# MongoDB connection
client = MongoClient("mongodb://localhost:27017/")  # replace with your MongoDB connection string
db = client["medical_assistance"]
collection = db["requests"]

def get_hash(text):
    """Generate a hash for the input text."""
    return hashlib.sha256(text.encode()).hexdigest()

def check_in_db(input_text, no_words, assistance_type):
    """Check if the input is already in the database."""
    query = {
        "hash": get_hash(f"{input_text}_{no_words}_{assistance_type}")
    }
    return collection.find_one(query)

def save_to_db(input_text, no_words, assistance_type, response):
    """Save the generated response to the database."""
    entry = {
        "hash": get_hash(f"{input_text}_{no_words}_{assistance_type}"),
        "input_text": input_text,
        "no_words": no_words,
        "assistance_type": assistance_type,
        "response": response
    }
    collection.insert_one(entry)

def getLLamaresponse(input_text, no_words, assistance_type):
    llm = CTransformers(model='models/llama-2-7b-chat.ggmlv3.q8_0.bin',
                        model_type='llama',
                        config={'max_new_tokens': 256, 'temperature': 0.01})
    # Prompt Template
    template = """
        Provide medical assistance for {assistance_type} based on the input {input_text}
        within {no_words} words.
    """

    prompt = PromptTemplate(input_variables=["assistance_type", "input_text", "no_words"],
                            template=template)

    # Generate the response from the LLama 2 model
    response = llm(prompt.format(assistance_type=assistance_type, input_text=input_text, no_words=no_words))
    return response

def speech_to_text():
    """Convert speech to text."""
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("Listening...")
        audio = recognizer.listen(source)
        try:
            text = recognizer.recognize_google(audio)
            st.success("Text recognized: " + text)
            return text
        except sr.UnknownValueError:
            st.error("Could not understand the audio")
        except sr.RequestError as e:
            st.error(f"Could not request results; {e}")

st.set_page_config(page_title="Medical Assistance using Llama 2",
                   page_icon='ðŸ¤–',
                   layout='centered',
                   initial_sidebar_state='collapsed')

st.header("Medical Assistance: Using Llama 2")

input_text = st.text_input("Input")

if st.button("Speak"):
    input_text = speech_to_text()

# Creating two more columns for additional 2 fields
col1, col2 = st.columns([7, 3])

with col1:
    no_words = st.selectbox('Word Limit',
                            ('50', '100', '150', '200'), index=0)

with col2:
    assistance_type = st.radio('Select Assistance Type',
                               ["Diagnosis", "Treatment", "Medication Info", "Symptoms"], index=0)

submit = st.button("Generate")

# Final response
if submit:
    existing_entry = check_in_db(input_text, no_words, assistance_type)
    if existing_entry:
        response = existing_entry["response"]
        st.write("Fetched from database:")
    else:
        response = getLLamaresponse(input_text, no_words, assistance_type)
        save_to_db(input_text, no_words, assistance_type, response)
        st.write("Generated by model:")
    st.write(response)
